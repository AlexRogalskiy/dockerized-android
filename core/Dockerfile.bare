#################################
#           STAGE 1             #
#################################

# First stage: build custom backend
FROM node:lts-alpine as stage1

RUN apk add tzdata
# Create backend directory
WORKDIR /usr/src/backend
COPY backend .
RUN yarn install --production && mv node_modules prod_node_modules
RUN yarn install
RUN yarn run build

#################################
#           STAGE 2             #
#################################

# Second stage: get Android SDK Command Line Tools, Node.js setup and websockify
FROM alpine:latest as stage2

RUN apk add --update-cache \
    wget \
    unzip \
    curl \
    git

# Download Android SDK Command Line Tools
ARG ANDROID_SDK_VERSION=6858069
ENV ANDROID_SDK_ROOT /opt/android-sdk
RUN mkdir -p ${ANDROID_SDK_ROOT}/cmdline-tools && \
    wget -q https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_VERSION}_latest.zip && \
    unzip *tools*linux*.zip -d ${ANDROID_SDK_ROOT}/cmdline-tools && \
    mv ${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools ${ANDROID_SDK_ROOT}/cmdline-tools/tools

# Download Node.js
ENV NODE_LTS_ROOT /opt/nodejs
RUN mkdir -p ${NODE_LTS_ROOT} && curl -sL https://deb.nodesource.com/setup_lts.x -o ${NODE_LTS_ROOT}/setup_lts.x

# Download websockify
ENV WEBSOCKIFY_ROOT /opt/websockify
RUN mkdir -p ${WEBSOCKIFY_ROOT} && git clone https://github.com/novnc/websockify ${WEBSOCKIFY_ROOT}

# Create folder for s6-overlay
ENV S6_OVERLAY_ROOT /s6-overlay
RUN mkdir -p ${S6_OVERLAY_ROOT}
COPY cont-init.d ${S6_OVERLAY_ROOT}/cont-init.d
COPY services.d/emulator ${S6_OVERLAY_ROOT}/services.d/emulator
COPY services.d/websockify ${S6_OVERLAY_ROOT}/services.d/websockify
COPY services.d/xvfb ${S6_OVERLAY_ROOT}/services.d/xvfb
COPY services.d/vnc ${S6_OVERLAY_ROOT}/services.d/vnc
COPY services.d/backend ${S6_OVERLAY_ROOT}/services.d/backend
# Copy builded backend
COPY --from=stage1 /usr/src/backend/package.json ${S6_OVERLAY_ROOT}/services.d/backend/package.json
COPY --from=stage1 /usr/src/backend/prod_node_modules ${S6_OVERLAY_ROOT}/services.d/backend/node_modules
COPY --from=stage1 /usr/src/backend/build ${S6_OVERLAY_ROOT}/services.d/backend/build

#################################
#           STAGE 3             #
#################################

# Third stage: build dockerized-android
FROM ubuntu:20.04

# Copy from previous stage
COPY --from=stage2 /opt/android-sdk /opt/android-sdk
COPY --from=stage2 /opt/nodejs .
COPY --from=stage2 /opt/websockify /opt/websockify
COPY --from=stage2 /s6-overlay /etc/

# set the environment variables
ENV ANDROID_SDK_ROOT /opt/android-sdk
ENV PATH ${PATH}:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/cmdline-tools/tools/bin:${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/emulator
ENV _JAVA_OPTIONS -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap
# WORKAROUND: for issue https://issuetracker.google.com/issues/37137213
ENV LD_LIBRARY_PATH ${ANDROID_SDK_ROOT}/emulator/lib64:${ANDROID_SDK_ROOT}/emulator/lib64/qt/lib
# patch emulator issue: Running as root without --no-sandbox is not supported. See https://crbug.com/638180.
# https://doc.qt.io/qt-5/qtwebengine-platform-notes.html#sandboxing-support
ENV QTWEBENGINE_DISABLE_SANDBOX 1 

ENV DISPLAY=:0 \
    SCREEN=0 \
    SCREEN_WIDTH=1600 \
    SCREEN_HEIGHT=900 \
    SCREEN_DEPTH=24+32 \
    LOCAL_PORT=5900 \
    TARGET_PORT=6080 \
    TIMEOUT=1 \
    VIDEO_PATH=/tmp/video \
    LOG_PATH=/var/log/supervisor \
    NODE_ENV=production \
    CUSTOM_APP_DEFAULT_PORT=4242 

#======================
# Install SDK packages
#======================
ARG ANDROID_VERSION=5.0.1
ARG API_LEVEL=21
ARG PROCESSOR=x86
ARG SYS_IMG=x86
ARG IMG_TYPE=google_apis
ARG BROWSER=android
ARG CHROME_DRIVER=2.40
ARG GOOGLE_PLAY_SERVICE=12.8.74
ARG GOOGLE_PLAY_STORE=11.0.50
ENV ANDROID_VERSION=$ANDROID_VERSION \
    API_LEVEL=$API_LEVEL \
    PROCESSOR=$PROCESSOR \
    SYS_IMG=$SYS_IMG \
    IMG_TYPE=$IMG_TYPE \
    BROWSER=$BROWSER \
    CHROME_DRIVER=$CHROME_DRIVER \
    GOOGLE_PLAY_SERVICE=$GOOGLE_PLAY_SERVICE \
    GOOGLE_PLAY_STORE=$GOOGLE_PLAY_STORE \
    APP_TYPE=Emulator \
    ANDROID_HOME=/root
ENV PATH ${PATH}:${ANDROID_HOME}/build-tools

#S6-Overlay
ADD https://github.com/just-containers/s6-overlay/releases/download/v2.2.0.1/s6-overlay-amd64-installer /tmp/
RUN chmod +x /tmp/s6-overlay-amd64-installer && /tmp/s6-overlay-amd64-installer /

RUN bash - setup_lts.x && rm setup_lts.x && apt-get -qqy update && apt-get -qqy install --no-install-recommends \
    openjdk-8-jdk \
    supervisor \
    x11vnc \
    nodejs \
    net-tools \
    qemu \
    qemu-kvm \
    virt-manager \
    libvirt-daemon-system \
    libvirt-clients \
    bridge-utils \
    xvfb \
    rinetd \
 && apt-get clean all \
 && rm -rf /var/lib/apt/lists/*

RUN yes | sdkmanager --licenses && \
    echo y | sdkmanager "platform-tools" "emulator"

#=============
# Set WORKDIR
#=============
WORKDIR /root/dockerized-android

#===============
# Expose Ports
#---------------
# 5555: ADB connection port
# 4242: REST API
# 6080: Websockify
#===============
EXPOSE 5555 4242 6080

#======================
# Add x11vnc config file
#======================
COPY configs/x11vnc.pref /etc/apt/preferences.d/

#======================
# Add Emulator Devices
#======================
COPY devices /root/devices

#======================
# Add utils
#======================
COPY utils /root/dockerized-android/utils
RUN chmod -R +x /root/dockerized-android/utils

ENTRYPOINT ["/init"]